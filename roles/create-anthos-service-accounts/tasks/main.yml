
---

- name: Create Anthos Google Cloud Service Accounts
  google.cloud.gcp_iam_service_account:
    name: "{{ item }}@{{ gcp_project_id }}.iam.gserviceaccount.com"
    display_name: "Anthos Service Account [{{ item }}]"
    project: "{{ gcp_project_id }}"
    auth_kind: application
    state: present
  with_items:
    - "{{ anthos_container_registry_service_account }}"
    - "{{ anthos_connect_agent_service_account }}"
    - "{{ anthos_connect_register_service_account }}"
    - "{{ anthos_logging_monitoring_service_account }}"

- name: Grant Roles Required for the Anthos Connect Agent Service Account
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gcloud projects add-iam-policy-binding "{{ gcp_project_id }}" --member="serviceAccount:{{ anthos_connect_agent_service_account }}@{{ gcp_project_id }}.iam.gserviceaccount.com" --role="{{ item }}"
  args:
    executable: /bin/bash
  changed_when: false
  with_items:
    - "roles/gkehub.connect"

- name: Grant Roles Required for the Anthos Connect Register Service Account
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gcloud projects add-iam-policy-binding "{{ gcp_project_id }}" --member="serviceAccount:{{ anthos_connect_register_service_account }}@{{ gcp_project_id }}.iam.gserviceaccount.com" --role="{{ item }}"
  args:
    executable: /bin/bash
  changed_when: false
  with_items:
    - "roles/gkehub.admin"

- name: Grant Roles Required for the Anthos Logging Monitoring Service Account
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      gcloud projects add-iam-policy-binding "{{ gcp_project_id }}" --member="serviceAccount:{{ anthos_logging_monitoring_service_account }}@{{ gcp_project_id }}.iam.gserviceaccount.com" --role="{{ item }}"
  args:
    executable: /bin/bash
  changed_when: false
  with_items:
    - "roles/logging.logWriter"
    - "roles/monitoring.metricWriter"
    - "roles/stackdriver.resourceMetadata.writer"
    - "roles/monitoring.dashboardEditor"
    - "roles/opsconfigmonitoring.resourceMetadata.writer"

- name: Create Temp Directory
  ansible.builtin.tempfile:
    state: directory
    suffix: .keys
  register: tmpdir
  changed_when: false

- name: Create an Ansible Service Account Key and Add to Secret Manager
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      if ! $(gcloud secrets versions describe latest --secret="{{ item }}" >/dev/null 2>&1) ; then
        gcloud iam service-accounts keys create "{{ item }}.json" --iam-account "{{ item }}@{{ gcp_project_id }}.iam.gserviceaccount.com"        
        if $(gcloud secrets describe "{{ item }}" >/dev/null 2>&1) ; then
          gcloud secrets versions add "{{ item }}" --data-file="{{ item }}.json"
        else
          gcloud secrets create "{{ item }}" --data-file="{{ item }}.json" --replication-policy=user-managed --locations="{{ secret_manager_locations }}"
        fi
        rm -f "{{ item }}.json"
      fi
    chdir: "{{ tmpdir.path }}"
  args:
    executable: /bin/bash
  changed_when: false
  with_items:
    - "{{ anthos_container_registry_service_account }}"
    - "{{ anthos_connect_agent_service_account }}"
    - "{{ anthos_connect_register_service_account }}"
    - "{{ anthos_logging_monitoring_service_account }}"

- name: Cleanup Temp Directory
  ansible.builtin.file:
    path: "{{ tmpdir.path }}"
    state: absent
  changed_when: false



